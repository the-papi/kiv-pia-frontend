# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

union AcceptGameResult = Game | GameDoesntExist | PlayerAlreadyInGame

union CancelGameResult = GameDoesntExist | GeneralStatus

union GameRequestResult = GameRequest | GameRequestCancelled

union GameState = GameSurrender | GameWin | SymbolPlacement

union RegisterResult = EmailAlreadyUsed | PasswordTooWeak | User

union RejectGameResult = GameDoesntExist | GameRejected

union SendGameRequestResult = GeneralStatus | PlayerAlreadyInGame

type ChatMessage {
  "Sender of the chat message"
  from: User!
  id: Int!
  message: String!
  "Time the message was sent"
  time: DateTime!
}

type EmailAlreadyUsed {
  message: String!
}

type FriendRequest {
  "Receiver of the friend request"
  foreigner: User!
}

type Game {
  "Board size (only one side - board is always square)"
  boardSize: BoardSize!
  "Time of game creation"
  datetime: DateTime!
  "List of all game states"
  gameStates: [SymbolPlacement!]!
  "List of all players (currently it should be list of 2 players)"
  players: [Player!]!
  "Winner of the game (null if game hasn't ended)"
  winner: Player
}

"Error that is returned when the game doesn't exist"
type GameDoesntExist {
  message: String!
}

"Error that is returned when the player rejected game request"
type GameRejected {
  status: Boolean!
}

type GameRequest {
  "Sender of the game request"
  from: User!
  "Request ID (random string) that is needed for game request acceptation"
  requestId: String!
}

"This object is sent when sender cancels game request"
type GameRequestCancelled {
  requestId: String!
}

"This object is sent when user accepts or rejects game request"
type GameResponse {
  requestId: String!
  status: GameResponseStatus!
}

"This object is used to give up the game"
type GameSurrender {
  player: Player!
}

"This object is used to announce the winner"
type GameWin {
  player: Player!
}

"General status object that can be used for simple operations that has boolean result"
type GeneralStatus {
  message: String!
  status: Boolean!
}

"Wrapper object for JWT access and refresh token"
type JWT {
  accessToken: String
  refreshToken: String
}

type Mutation {
  "Accept friend request sent by another user"
  acceptFriendRequest(input: AcceptFriendRequestInput!): Boolean!
  "Accept game request and start the game"
  acceptGameRequestAndStartGame(input: GameResponseInput!): AcceptGameResult!
  "Cancels sent game request"
  cancelGameRequest(input: CancelGameRequestInput!): CancelGameResult!
  "Changes password for the currently logged in user"
  changePassword(input: ChangePasswordInput!): Boolean
  "Changes user role to admin or casual user"
  changeUserRole(input: ChangeUserRoleInput!): Boolean
  "Login user by given credentials"
  login(input: LoginInput!): JWT
  "Place assigned symbol at the given position"
  placeSymbol(input: PlaceSymbolInput!): Boolean!
  "Registers new user"
  register(input: RegisterInput!): RegisterResult!
  "Reject friend request sent by another user"
  rejectFriendRequest(input: RejectFriendRequestInput!): Boolean!
  "Rejects the game request"
  rejectGameRequest(input: GameResponseInput!): RejectGameResult!
  "Remove friend from friend list"
  removeFriend(input: RemoveFriendInput!): Boolean!
  "Resets password to the given user"
  resetPassword(input: ResetPasswordInput!): String
  "Sends chat message to the game chat"
  sendChatMessage(input: ChatMessageInput!): Boolean!
  "Send friend request to another user"
  sendFriendRequest(input: FriendRequestInput!): Boolean!
  "Send game request to another player"
  sendGameRequest(input: GameRequestInput!): SendGameRequestResult
  "Surrender the game"
  surrender: Boolean!
}

type PasswordTooWeak {
  message: String!
}

type Player {
  symbol: GameSymbol!
  user: User!
}

"Error that is returned when the player is already in another game"
type PlayerAlreadyInGame {
  message: String!
}

"This object is used for telling user it's own personal information"
type Profile {
  admin: Boolean!
  email: String!
  id: Float!
  username: String!
}

type Query {
  "Returns active game for currently logged in user"
  activeGame: Game
  "Returns all online users"
  activeUsers: [UserStatusUpdate!]
  "Returns chat messages for the active game"
  chatMessagesForActiveGame: [ChatMessage!]!
  "Get all incoming friend requests"
  friendRequests: [FriendRequest!]!
  "Returns list of all finished games"
  gamesHistory: [Game!]
  "Can be used to inspect user profile"
  me: Profile!
  "Returns list of all users"
  users: [User!]!
}

type Subscription {
  "You can receive game requests through this subscription"
  gameRequest: GameRequestResult!
  "Answer to the game request"
  gameResponse: GameResponse!
  "Sends new game states"
  gameState: GameState!
  "This subscription sends new chat messages in the active game"
  newChatMessage: ChatMessage!
  "This subscription sends friend requests"
  newFriendRequest: FriendRequest!
  "This subscriptions sends updates about friend status"
  updatedFriendStatus: User!
  "Returns object when user changed it's status (online/offline)"
  userStatus: UserStatusUpdate!
}

type SymbolPlacement {
  symbol: GameSymbol!
  x: Int!
  y: Int!
}

type User {
  admin: Boolean!
  email: String!
  friendStatus: FriendStatus
  id: Float!
  online: Boolean
  username: String!
}

type UserStatusUpdate {
  status: UserStatus!
  user: User!
}

enum BoardSize {
  Eleven
  Five
  Seven
}

enum FriendStatus {
  Friend
  NotFriend
  PendingRequest
}

enum GameResponseStatus {
  Accepted
  Rejected
}

enum GameSymbol {
  Circle
  Cross
}

enum UserStatus {
  Offline
  Online
}

input AcceptFriendRequestInput {
  userId: Int!
}

input CancelGameRequestInput {
  requestId: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeUserRoleInput {
  admin: Boolean!
  userId: Int!
}

input ChatMessageInput {
  message: String!
}

input FriendRequestInput {
  foreignUserId: Int!
}

input GameRequestInput {
  boardSize: BoardSize = Seven
  userId: Int!
}

input GameResponseInput {
  requestId: String!
}

input LoginInput {
  password: String!
  username: String!
}

input PlaceSymbolInput {
  x: Int!
  y: Int!
}

input RegisterInput {
  email: String!
  password: String!
}

input RejectFriendRequestInput {
  userId: Int!
}

input RemoveFriendInput {
  friendId: Int!
}

input ResetPasswordInput {
  userId: Int!
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime
