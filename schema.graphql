# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

union AcceptGameResult = Game | GameDoesntExist | PlayerAlreadyInGame

union CancelGameResult = GameDoesntExist | GeneralStatus

union GameRequestResult = GameRequest | GameRequestCancelled

union GameState = GameWin | SymbolPlacement

union RegisterResult = EmailAlreadyUsed | PasswordTooWeak | User

union RejectGameResult = GameDoesntExist | GameRejected

type ChatMessage {
  from: User!
  id: Int!
  message: String!
  time: DateTime!
}

type EmailAlreadyUsed {
  message: String!
}

type FriendRequest {
  foreigner: User!
  id: Float!
}

type Game {
  datetime: DateTime!
  gameStates: [SymbolPlacement!]!
  players: [Player!]!
  winner: Player
}

type GameDoesntExist {
  message: String!
}

type GameRejected {
  status: Boolean!
}

type GameRequest {
  from: User!
  requestId: String!
}

type GameRequestCancelled {
  requestId: String!
}

type GameResponse {
  requestId: String!
  status: GameResponseStatus!
}

type GameWin {
  player: Player!
}

type GeneralStatus {
  message: String!
  status: Boolean!
}

type JWT {
  accessToken: String
  refreshToken: String
}

type Mutation {
  acceptFriendRequest(input: AcceptFriendRequestInput!): Boolean!
  acceptGameRequestAndStartGame(input: GameResponseInput!): AcceptGameResult!
  cancelGameRequest(input: CancelGameRequestInput!): CancelGameResult!
  changeUserRole(input: ChangeUserRoleInput!): String
  login(input: LoginInput!): JWT
  placeSymbol(input: PlaceSymbolInput!): Boolean!
  register(input: RegisterInput!): RegisterResult!
  rejectGameRequest(input: GameResponseInput!): RejectGameResult!
  resetPassword(input: ResetPasswordInput!): String
  sendChatMessage(input: ChatMessageInput!): Boolean!
  sendFriendRequest(input: FriendRequestInput!): Boolean!
  sendGameRequest(input: GameRequestInput!): String
}

type PasswordTooWeak {
  message: String!
}

type Player {
  symbol: GameSymbol!
  user: User!
}

type PlayerAlreadyInGame {
  message: String!
}

type Profile {
  admin: Boolean!
  email: String!
  id: Float!
  username: String!
}

type Query {
  activeGame: Game
  activeUsers: [UserStatusUpdate!]
  chatMessagesForActiveGame: [ChatMessage!]!
  friendRequests: [FriendRequest!]!
  gamesHistory: [Game!]
  me: Profile!
  users: [User!]!
}

type Subscription {
  gameRequest: GameRequestResult!
  gameResponse: GameResponse!
  gameState: GameState!
  newChatMessage: ChatMessage!
  userStatus: UserStatusUpdate!
}

type SymbolPlacement {
  symbol: GameSymbol!
  x: Int!
  y: Int!
}

type User {
  admin: Boolean!
  email: String!
  id: Float!
  username: String!
}

type UserStatusUpdate {
  status: UserStatus!
  user: User!
}

enum GameResponseStatus {
  Accepted
  Rejected
}

enum GameSymbol {
  Circle
  Cross
}

enum UserStatus {
  Offline
  Online
}

input AcceptFriendRequestInput {
  requestId: Int!
}

input CancelGameRequestInput {
  requestId: String!
}

input ChangeUserRoleInput {
  admin: Boolean!
  userId: Int!
}

input ChatMessageInput {
  message: String!
}

input FriendRequestInput {
  foreignUserId: Int!
}

input GameRequestInput {
  userId: Int!
}

input GameResponseInput {
  requestId: String!
}

input LoginInput {
  password: String!
  username: String!
}

input PlaceSymbolInput {
  x: Int!
  y: Int!
}

input RegisterInput {
  email: String!
  password: String!
}

input ResetPasswordInput {
  userId: Int!
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime
